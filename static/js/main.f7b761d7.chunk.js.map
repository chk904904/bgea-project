{"version":3,"sources":["logo.svg","components/Slider.js","components/Contribute.js","components/Slogan.js","components/Story.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","width","spacing","margin","height","PrettoSlider","withStyles","color","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","ContinuousSlider","classes","className","valueLabelDisplay","aria-label","defaultValue","Contribute","style","display","flexDirection","justifyContent","padding","Slogan","props","useSpring","opacity","from","config","duration","div","Story","React","useState","open","setOpen","handleClose","Button","variant","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,2GCOrCC,G,OAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,IAAyB,EAAnBF,EAAMG,QAAQ,IAE7BC,OAAQ,CACNC,OAAQL,EAAMG,QAAQ,SAoB1B,IAAMG,EAAeC,YAAW,CAC9BN,KAAM,CACJO,MAAO,UACPH,OAAQ,EACRH,MAAO,KAETO,MAAO,CACLJ,OAAQ,GACRH,MAAO,GACPQ,gBAAiB,OACjBC,OAAQ,yBACRC,WAAY,GACZC,YAAa,GACb,6BAA8B,CAC5BC,UAAW,YAGfC,OAAQ,GACRC,WAAY,CACVC,KAAM,qBAERC,MAAO,CACLb,OAAQ,EACRc,aAAc,GAEhBC,KAAM,CACJf,OAAQ,EACRc,aAAc,IA3BGZ,CA6BlBc,KAEY,SAASC,IACtB,IAAMC,EAAUzB,IAEhB,OACE,yBAAK0B,UAAWD,EAAQtB,MACtB,yBAAKuB,UAAWD,EAAQnB,SACxB,kBAACE,EAAD,CAAcmB,kBAAkB,OAAOC,aAAW,gBAAgBC,aAAc,MClEvE,SAASC,IACtB,OACE,yBACEC,MAAO,CACLxB,OAAQ,OACRD,OAAQ,EACR0B,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,QAAS,SAGX,qDACA,kBAACX,EAAD,O,oBCbS,SAASY,IACtB,IAAMC,EAAQC,YAAU,CAAEC,QAAS,EAAGC,KAAM,CAAED,QAAS,GAAKE,OAAQ,CAAEC,SAAU,OAChF,OACE,kBAAC,IAASC,IAAV,CACEZ,MAAK,2BACAM,GADA,IAEH9B,OAAQ,OACRD,OAAQ,EACR0B,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,QAAS,UAGX,8D,6DCTS,SAASS,IAAS,IAAD,EACNC,IAAMC,UAAS,GADT,mBACvBC,EADuB,KACjBC,EADiB,KAOxBC,EAAc,WAClBD,GAAQ,IAGV,OACE,yBACEjB,MAAO,CACLxB,OAAQ,OACRD,OAAQ,EACR0B,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,QAAS,OACTvB,gBAAiB,YAGnB,kBAACsC,EAAA,EAAD,CAAQC,QAAQ,WAAWzC,MAAM,UAAU0C,QApBvB,WACtBJ,GAAQ,KAmBN,oBAGA,kBAACK,EAAA,EAAD,CACEN,KAAMA,EACNO,QAASL,EACTM,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,EAAA,EAAD,CAAaC,GAAG,sBAAhB,yCACA,kBAACC,EAAA,EAAD,KACE,6BACE,wBAAI5B,MAAO,CAAErB,MAAO,YAApB,QAEF,kBAACkD,EAAA,EAAD,CAAmBF,GAAG,4BAAtB,0EAIF,kBAACG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAD,CAAQE,QAASH,EAAavC,MAAM,UAAUoD,WAAS,GAAvD,a,MClCKC,MAVf,WACE,OACE,oCACE,kBAAC3B,EAAD,MACA,kBAACQ,EAAD,MACA,kBAACd,EAAD,QCCckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7b761d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2,\n  },\n  margin: {\n    height: theme.spacing(3),\n  },\n}));\n\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst PrettoSlider = withStyles({\n  root: {\n    color: '#8d70c5',\n    height: 8,\n    width: 800,\n  },\n  thumb: {\n    height: 48,\n    width: 48,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -20,\n    marginLeft: -24,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 28px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default function ContinuousSlider() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.margin} />\n      <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" defaultValue={70} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ContinuousSlider from './Slider';\n\nexport default function Contribute() {\n  return (\n    <div\n      style={{\n        height: '90vh',\n        margin: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '3rem',\n      }}\n    >\n      <h1>How can I contribute?</h1>\n      <ContinuousSlider />\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nexport default function Slogan() {\n  const props = useSpring({ opacity: 1, from: { opacity: 0 }, config: { duration: 5000 } });\n  return (\n    <animated.div\n      style={{\n        ...props,\n        height: '90vh',\n        margin: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '3rem',\n      }}\n    >\n      <h1>Nothing about us, without us.</h1>\n    </animated.div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function Story() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div\n      style={{\n        height: '90vh',\n        margin: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '3rem',\n        backgroundColor: '#efeeee',\n      }}\n    >\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        interactive item\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">In Allegheny county, black girls are:</DialogTitle>\n        <DialogContent>\n          <div>\n            <h1 style={{ color: '#4f0dd2' }}>13x</h1>\n          </div>\n          <DialogContentText id=\"alert-dialog-description\">\n            more likely than white girls to be arrested by the Pittsburgh Police.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Got it\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport Contribute from './components/Contribute';\nimport Slogan from './components/Slogan';\nimport Story from './components/Story';\nimport logo from './logo.svg';\n\nfunction App() {\n  return (\n    <>\n      <Slogan />\n      <Story />\n      <Contribute />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}